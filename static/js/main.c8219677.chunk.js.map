{"version":3,"sources":["actions/actiontypes.ts","components/App.tsx","actions/index.ts","components/Header.tsx","components/AddTaskForm.tsx","components/Tasks.tsx","components/Profile.tsx","components/Login.tsx","routers/PrivateRoute.tsx","routers/PublicRoute.tsx","reducers/index.ts","index.tsx","localStorage.ts","routers/AppRouter.tsx"],"names":["ActionTypes","App","className","React","Component","checkAuthentication","auth","type","Header","onLogoutclick","props","isAuthenticated","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","this","onClick","connect","state","AddTaskForm","title","categoryTitle","error","onSubmit","bind","e","preventDefault","target","elements","value","uuid","setState","placeholder","categories","map","category","i","key","name","Tasks","getCategories","deleteTask","newTask","addTask","index","tasks","task","onDelete","length","renderCategories","dispatch","a","async","axios","get","response","payload","data","Profile","Login","username","password","onFormSubmit","checkCredentials","loginData","JSON","stringify","localStorage","setItem","getItem","parsedData","parse","htmlFor","component","rest","reducers","combineReducers","action","filter","persistedState","err","loadState","store","createStore","composeWithDevTools","applyMiddleware","thunk","subscribe","saveState","getState","ReactDOM","render","path","exact","document","querySelector"],"mappings":"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","file":"static/js/main.c8219677.chunk.js","sourcesContent":["import {\n  GetCategoriesAction,\n  DeleteTaskAction,\n  AddTaskAction,\n  AuthenticationAction\n} from '../actions';\n\nexport enum ActionTypes {\n  getCategories,\n  deleteTask,\n  addTask,\n  checkAuthentication\n}\n\nexport type Action =\n  | GetCategoriesAction\n  | DeleteTaskAction\n  | AddTaskAction\n  | AuthenticationAction;\n","import React from 'react';\nclass App extends React.Component {\n    render() {\n        return (\n            <div className='row'>\n                <div className='col-sm'>\n                    <h1 className='mt-3'>Welcome to the app!</h1>\n                    <h4 className='mt-5'>What is this app about?</h4>\n                    <p>\n                        Lorem ipsum dolor, sit amet consectetur adipisicing\n                        elit. Esse, unde consectetur. Tempora cupiditate,\n                        dolores excepturi nihil vero neque amet iste perferendis\n                        dolorum unde ducimus aut officiis laboriosam quo! Ipsum,\n                        praesentium.\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { App };\n","import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport { ActionTypes } from './actiontypes';\n\nconst url = 'data.json';\n\nexport interface Category {\n    name: string;\n    tasks: Task[];\n}\n\nexport interface Task {\n    id: string;\n    title: string;\n    categoryTitle?: string;\n    error?: null;\n}\n\nexport interface Auth {\n    auth: boolean;\n}\n\nexport interface GetCategoriesAction {\n    type: ActionTypes.getCategories;\n    payload: Category[];\n}\n\nexport interface DeleteTaskAction {\n    type: ActionTypes.deleteTask;\n    payload: { id: string };\n}\n\nexport interface AddTaskAction {\n    type: ActionTypes.addTask;\n    payload: Task;\n}\n\nexport interface AuthenticationAction {\n    type: ActionTypes.checkAuthentication;\n    payload?: Auth;\n}\n\nexport const getCategories = () => {\n    return async (dispatch: Dispatch) => {\n        const response = await axios.get<Category[]>(url);\n\n        dispatch<GetCategoriesAction>({\n            type: ActionTypes.getCategories,\n            payload: response.data\n        });\n    };\n};\n\nexport const deleteTask = (id: string) => {\n    return {\n        type: ActionTypes.deleteTask,\n        payload: { id }\n    };\n};\n\nexport const addTask = (newTask: Task): AddTaskAction => {\n    return {\n        type: ActionTypes.addTask,\n        payload: newTask\n    };\n};\n\nexport const checkAuthentication = (auth: Auth): AuthenticationAction => {\n    return {\n        type: ActionTypes.checkAuthentication\n    };\n};\n","import React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { ReduxStoreState } from '../reducers';\nimport { Auth, checkAuthentication } from '../actions';\nimport { connect } from 'react-redux';\n\nexport interface HeaderProps {\n    isAuthenticated: Auth;\n    checkAuthentication: typeof checkAuthentication;\n}\n\nexport class Header extends React.Component<HeaderProps> {\n    onLogoutclick = () => {\n        this.props.checkAuthentication(this.props.isAuthenticated);\n    };\n\n    render() {\n        return (\n            <div className='row'>\n                <div className='col-sm'>\n                    <nav className='navbar navbar-expand-lg navbar-light bg-light'>\n                        <Link className='navbar-brand' to='/'>\n                            Tasks App\n                        </Link>\n                        <button\n                            className='navbar-toggler'\n                            type='button'\n                            data-toggle='collapse'\n                            data-target='#navbarNav'\n                            aria-controls='navbarNav'\n                            aria-expanded='false'\n                            aria-label='Toggle navigation'\n                        >\n                            <span className='navbar-toggler-icon'></span>\n                        </button>\n                        <div\n                            className='collapse navbar-collapse'\n                            id='navbarNav'\n                        >\n                            <ul id='nav-mobile' className='navbar-nav'>\n                                <li className='nav-item'>\n                                    <NavLink className='nav-link' to='/'>\n                                        Home\n                                    </NavLink>\n                                </li>\n                                <li className='nav-item'>\n                                    <NavLink className='nav-link' to='/tasks'>\n                                        Tasks\n                                    </NavLink>\n                                </li>\n                                <li className='nav-item'>\n                                    <NavLink className='nav-link' to='/profile'>\n                                        Profile\n                                    </NavLink>\n                                </li>\n\n                                {!this.props.isAuthenticated.auth && (\n                                    <li className='nav-item'>\n                                        <NavLink\n                                            className='nav-link text-success'\n                                            to='/login'\n                                        >\n                                            Login\n                                        </NavLink>\n                                    </li>\n                                )}\n                            </ul>\n                            {this.props.isAuthenticated.auth && (\n                                <button\n                                    className='btn btn-sm btn-danger ml-auto'\n                                    onClick={this.onLogoutclick}\n                                >\n                                    Logout\n                                </button>\n                            )}\n                        </div>\n                    </nav>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: ReduxStoreState) => {\n    return {\n        isAuthenticated: state.isAuthenticated\n    };\n};\n\nexport default connect(mapStateToProps, { checkAuthentication })(Header);\n","import React from 'react';\nimport { Task, Category } from '../actions';\nimport uuid from 'uuid';\n\ninterface AddTaskFormProps {\n    categories: Category[];\n    onSubmit(newTask: Task): void;\n}\n\nexport class AddTaskForm extends React.Component<AddTaskFormProps> {\n    constructor(props: AddTaskFormProps) {\n        super(props);\n\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    state: Task = {\n        id: 'default-id',\n        title: '',\n        categoryTitle: '',\n        error: null\n    };\n\n    onSubmit(e: any) {\n        e.preventDefault();\n        let title = e.target.elements[0].value;\n        let categoryTitle = e.target.elements[1].value;\n        let id = uuid();\n        if (title && categoryTitle !== 'Select an option') {\n            this.setState(\n                () => {\n                    return {\n                        title,\n                        categoryTitle,\n                        id,\n                        error: null\n                    };\n                },\n                () => this.props.onSubmit(this.state)\n            );\n            e.target.elements[0].value = '';\n            e.target.elements[1].value = 'Select an option';\n        } else if (\n            !title ||\n            !categoryTitle ||\n            categoryTitle === 'Select an option'\n        ) {\n            this.setState(() => {\n                return {\n                    error:\n                        'Please make sure you you have enetered a Task title and selected a category'\n                };\n            });\n        }\n    }\n    render() {\n        return (\n            <div>\n                {this.state.error && (\n                    <p className='col-md-12 text-danger mt-4'>\n                        {this.state.error}\n                    </p>\n                )}\n                <h4 className='mt-2'>Add a New Task</h4>\n                <form className='mt-4' onSubmit={this.onSubmit}>\n                    <div className='form-row'>\n                        <div className='form-group col-md-6'>\n                            <input\n                                className='form-control'\n                                id='task_title'\n                                placeholder='Enter task title...'\n                                type='text'\n                            />\n                        </div>\n                        <div className='form-group col-md-6'>\n                            <select\n                                id='formcontrolselect'\n                                className='form-control'\n                            >\n                                <option>Select an option</option>\n                                {this.props.categories.map(\n                                    (category, i: number) => {\n                                        return (\n                                            <option key={i}>\n                                                {category.name}\n                                            </option>\n                                        );\n                                    }\n                                )}\n                            </select>\n                        </div>\n                    </div>\n                    <input\n                        className='btn btn-primary'\n                        type='submit'\n                        value='Add Task'\n                    />\n                </form>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { ReduxStoreState } from '../reducers/';\nimport { connect } from 'react-redux';\nimport { Task, Category, getCategories, deleteTask, addTask } from '../actions';\nimport { AddTaskForm } from '../components/AddTaskForm';\n\nexport interface TasksProps {\n    categories: Category[];\n    getCategories: Function;\n    deleteTask: typeof deleteTask;\n    addTask: typeof addTask;\n}\n\nexport class Tasks extends React.Component<TasksProps> {\n    constructor(props: TasksProps) {\n        super(props);\n\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    componentDidMount() {\n        this.props.getCategories();\n    }\n\n    onDelete(id: string) {\n        this.props.deleteTask(id);\n    }\n\n    onSubmit(newTask: Task) {\n        this.props.addTask(newTask);\n    }\n\n    renderCategories() {\n        return (\n            this.props.categories &&\n            this.props.categories.map((category: Category, index: number) => {\n                return (\n                    <div className='col-md-6' key={index}>\n                        <h3>{category.name}</h3>\n\n                        {category.tasks.map((task: Task) => {\n                            return (\n                                <div className='mb-3' key={task.id}>\n                                    <span className='pr-4'>{task.title}</span>\n                                    <button\n                                        className='task_remove btn btn-sm btn-danger'\n                                        onClick={() => this.onDelete(task.id)}\n                                    >\n                                        Remove Task\n                                    </button>\n                                </div>\n                            );\n                        })}\n                    </div>\n                );\n            })\n        );\n    }\n    render() {\n        return (\n            <div>\n                <AddTaskForm\n                    onSubmit={this.onSubmit}\n                    categories={this.props.categories}\n                />\n                <div className='row mt-5'>\n                    <div className='col-12 mb-4'>\n                        <h2>Tasks Categories</h2>\n                    </div>\n                    {this.props.categories.length > 0 ? (\n                        this.renderCategories()\n                    ) : (\n                        <p className='no_data'>No data</p>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: ReduxStoreState) => {\n    return {\n        categories: state.categories\n    };\n};\n\nexport default connect(mapStateToProps, { getCategories, addTask, deleteTask })(\n    Tasks\n);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Profile extends React.Component {\n  render() {\n    return (\n      <div>\n        <p>Welcome, Admin</p>\n        <Link to='/tasks'>Go to the Tasks page</Link>\n      </div>\n    );\n  }\n}\n\nexport { Profile };\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { ReduxStoreState } from '../reducers';\nimport { checkAuthentication, Auth } from '../actions';\n\ninterface LoginProps {\n    isAuthenticated: Auth;\n    checkAuthentication: typeof checkAuthentication;\n}\n\nexport class Login extends React.Component<LoginProps> {\n    state = { username: 'Admin', password: '54321', error: null };\n\n    componentDidMount() {\n        const loginData = JSON.stringify(this.state);\n        localStorage.setItem('credentials', loginData);\n    }\n\n    checkCredentials(username: string, password: string) {\n        const data: any = localStorage.getItem('credentials');\n        const parsedData = JSON.parse(data);\n\n        if (\n            username === parsedData.username &&\n            password === parsedData.password\n        ) {\n            this.props.checkAuthentication(this.props.isAuthenticated);\n        } else {\n            this.setState(() => {\n                return {\n                    error: 'Wrong username or password.'\n                };\n            });\n        }\n    }\n\n    onFormSubmit = (e: any) => {\n        e.preventDefault();\n        const [username, password] = e.target.elements;\n        this.checkCredentials(username.value, password.value);\n    };\n\n    render() {\n        return (\n            <div>\n                {this.state.error && <p>{this.state.error}</p>}\n                <form onSubmit={this.onFormSubmit}>\n                    <div className='form-group'>\n                        <label htmlFor='user'>Username</label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='usernameinput'\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <label htmlFor='pass'>Password</label>\n                        <input\n                            type='password'\n                            className='form-control'\n                            id='passwordinput'\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <input\n                            value='Log In'\n                            type='submit'\n                            className='btn btn-primary'\n                        />\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: ReduxStoreState) => {\n    return {\n        isAuthenticated: state.isAuthenticated\n    };\n};\n\nexport default connect(mapStateToProps, { checkAuthentication })(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\nimport { ReduxStoreState } from '../reducers';\nimport { Auth } from '../actions';\n\ninterface PrivateRouteProps {\n    isAuthenticated: Auth;\n    exact?: boolean;\n    path: string;\n    component: React.ComponentType<any>;\n}\n\nexport const PrivateRoute = ({\n    isAuthenticated,\n    component: Component,\n    ...rest\n}: PrivateRouteProps) => (\n    <Route\n        {...rest}\n        component={(props: any) =>\n            isAuthenticated.auth ? (\n                <div>\n                    <Component {...props} />\n                </div>\n            ) : (\n                <div>\n                    <Redirect to='/login' />\n                </div>\n            )\n        }\n    />\n);\nconst mapStateToProps = (state: ReduxStoreState) => ({\n    isAuthenticated: state.isAuthenticated\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\nimport { ReduxStoreState } from '../reducers';\nimport { Auth } from '../actions';\n\ninterface PublicRouteProps {\n    isAuthenticated: Auth;\n    exact?: boolean;\n    path: string;\n    component: React.ComponentType<any>;\n}\n\nexport const PublicRoute = ({\n    isAuthenticated,\n    component: Component,\n    ...rest\n}: PublicRouteProps) => (\n    <Route\n        {...rest}\n        component={(props: PublicRouteProps) => {\n            return isAuthenticated.auth ? (\n                <Redirect to='/profile' />\n            ) : (\n                <div>\n                    <Component {...props} />\n                </div>\n            );\n        }}\n    />\n);\nconst mapStateToProps = (state: ReduxStoreState) => ({\n    isAuthenticated: state.isAuthenticated\n});\n\nexport default connect(mapStateToProps)(PublicRoute);\n","import { combineReducers } from 'redux';\nimport { Category, Auth } from '../actions';\nimport { Action, ActionTypes } from '../actions/actiontypes';\n\nexport interface ReduxStoreState {\n  categories: Category[];\n  isAuthenticated: Auth;\n}\n\nexport const categoriesReducer = (state: Category[] = [], action: Action) => {\n  switch (action.type) {\n    case ActionTypes.getCategories:\n      return state.length === 0 ? action.payload : state;\n    case ActionTypes.deleteTask:\n      return state.map(category => {\n        return {\n          ...category,\n          tasks: category.tasks.filter(task => task.id !== action.payload.id)\n        };\n      });\n    case ActionTypes.addTask:\n      return state.map(category => {\n        const { id, title } = action.payload;\n        if (action.payload.categoryTitle === category.name) {\n          return {\n            ...category,\n            tasks: [...category.tasks, { id, title }]\n          };\n        } else {\n          return {\n            ...category\n          };\n        }\n      });\n    default:\n      return state;\n  }\n};\n\nexport const authReducer = (state: Auth = { auth: false }, action: Action) => {\n  switch (action.type) {\n    case ActionTypes.checkAuthentication:\n      return state.auth ? { auth: false } : { auth: true };\n    default:\n      return state;\n  }\n};\n\nexport const reducers = combineReducers<ReduxStoreState>({\n  categories: categoriesReducer,\n  isAuthenticated: authReducer\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Provider } from 'react-redux';\nimport { AppRouter } from './routers/AppRouter';\nimport thunk from 'redux-thunk';\nimport { reducers } from './reducers/';\nimport { saveState, loadState } from './localStorage';\n\nconst persistedState = loadState();\n\nconst store = createStore(\n    reducers,\n    persistedState,\n    composeWithDevTools(applyMiddleware(thunk))\n);\n\nstore.subscribe(() => {\n    saveState(store.getState());\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppRouter />\n    </Provider>,\n    document.querySelector('#root')\n);\n","/** Presisting Redux State in localstorage **/\n\nexport const loadState = () => {\n    try {\n        const state = localStorage.getItem('state');\n        if (state === null) {\n            return undefined;\n        }\n        return JSON.parse(state);\n    } catch (err) {\n        return undefined;\n    }\n};\n\nexport const saveState = (state: {}) => {\n    try {\n        const data = JSON.stringify(state);\n        localStorage.setItem('state', data);\n    } catch (err) {}\n};\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { App } from '../components/App';\nimport Header from '../components/Header';\nimport Tasks from '../components/Tasks';\nimport { Profile } from '../components/Profile';\nimport Login from '../components/Login';\nimport PrivateRoute from '../routers/PrivateRoute';\nimport PublicRoute from './PublicRoute';\n\nexport const AppRouter = () => {\n    return (\n        <BrowserRouter>\n            <div className='container'>\n                <Header />\n                <Switch>\n                    <Route path='/' exact component={App} />\n                    <PrivateRoute path='/tasks' component={Tasks} />\n                    <PrivateRoute path='/profile' component={Profile} />\n                    <PublicRoute path='/login' component={Login} />\n                </Switch>\n            </div>\n        </BrowserRouter>\n    );\n};\n"],"sourceRoot":""}